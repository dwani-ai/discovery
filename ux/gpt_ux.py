import gradio as gr
import requests
import logging
import os

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

vlm_base_url = os.getenv('VLLM_IP', "0.0.0.0")
API_URL = f"http://{vlm_base_url}:18888/process_pdf"  # Adjust port if needed

uploaded_pdf_path = {"path": None}


def chat_with_pdf(history, message, pdf_file=None):
    # If a new PDF file is uploaded, update stored path
    if pdf_file is not None:
        uploaded_pdf_path["path"] = pdf_file

    pdf_path = uploaded_pdf_path.get("path")
    if not pdf_path:
        return history + [[message, "‚ö†Ô∏è Please upload a PDF file before chatting."]]

    try:
        with open(pdf_path, "rb") as f:
            files = {"file": (pdf_path.name, f, "application/pdf")}
            data = {"prompt": message}
            response = requests.post(API_URL, files=files, data=data)
            response.raise_for_status()
            result = response.json()
            answer = result.get("response", "No response from server.")
            return history + [[message, answer]]
    except Exception as e:
        logger.error(f"Request to API failed: {e}")
        return history + [[message, f"‚ùå API request failed: {e}"]]


css = """
.gradio-container {
    max-width: 1200px;
    margin: auto;
}
#chatbot {
    height: calc(100vh - 200px);
    max-height: 800px;
}
"""

with gr.Blocks(title="dwani.ai - PDF Chat with GPT-OSS", css=css, fill_width=True) as demo:
    gr.Markdown("# üìÑ Chat with Your PDF Document")

    with gr.Row():
        with gr.Column(scale=3):
            chatbot = gr.Chatbot([], elem_id="chatbot", label="PDF Chatbot")

            user_message = gr.Textbox(
                placeholder="Enter your question about the PDF here...",
                label="Your Question",
            )
            pdf_input = gr.File(
                label="Upload PDF (upload once per session)",
                file_types=[".pdf"],
            )
            clear_button = gr.Button("Clear Chat")

        with gr.Column(scale=1):
            gr.Markdown(
                """
                ### Instructions  
                1. Upload a PDF document once.  
                2. Ask any questions related to the PDF in the chatbox.  
                3. Receive concise answers generated by GPT-OSS based on your PDF content.  
                """
            )

    user_message.submit(chat_with_pdf, inputs=[chatbot, user_message, pdf_input], outputs=chatbot)
    clear_button.click(lambda: [], None, chatbot)

if __name__ == "__main__":
    try:
        demo.launch(server_name="0.0.0.0", server_port=8001)
    except Exception as e:
        logger.error(f"Failed to launch Gradio interface: {str(e)}")
        print(f"Failed to launch Gradio interface: {str(e)}")
